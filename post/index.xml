<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on My New Hugo Site</title>
    <link>https://xh306.github.io/post/</link>
    <description>Recent content in Posts on My New Hugo Site</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 26 Dec 2019 14:38:14 +0800</lastBuildDate>
    
	<atom:link href="https://xh306.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>SpringCloud相关面试题</title>
      <link>https://xh306.github.io/post/blog/</link>
      <pubDate>Thu, 26 Dec 2019 14:38:14 +0800</pubDate>
      
      <guid>https://xh306.github.io/post/blog/</guid>
      <description>面试官:HashMap里面的hashcode有什么作用 返回对象的哈希码值（就是散列码），用来支持哈希表，：例如HashMap 可以提高哈希表的性能。 面试官:项目中异常怎么设计的 有的利用模板模式 有的利用spring的拦截器
面试官:SpringBoot和SpringCloud有什么区别 SpringBoot专注于快速方便的开发单个个体微服务。 SpringCloud是关注全局的微服务协调整理治理框架，它将SpringBoot 开发的一个个单体微服务整合并管理起来， 为各个服务之间提供，配置管理、服务发现、断路器、路由、微代理、事件总线、全局锁、精选决策、分布式会话等集成服务。 SpringBoot可以离开SpringCloud独立开发项目，但SpringCloud离不开SpringBoot ，属于依赖关系。 SpringBoot专注于快速，方便开发单个微服务个体，SpringCloud关注全局的服务治理框架。
面试官:项目为什么用springCloud ​	SpringCloud来源于Spring，质量、稳定性、持续性都可以得到保证。 ​	SpringCloud天然支持SpringBoot，更加便于业务落地。 ​	SpringCloud发展的非常快，从16开始接触的时候相关组件版本为1.x，现在将要发布2.x系列。 ​	SpringCloud是Java领域最适合做微服务的框架。 ​	相比于其它框架，SpringCloud对微服务周边环境的支持力度最大。对中小企业来讲，使用门槛更低。
面试官:消息队列MQ怎么保证数据不重复 怎么保证消息队列消费的幂等性： 比如数据写库，可以先根据主键查一下，如果这数据都有了，就update 如果不是上面两个场景，那做的稍微复杂一点，需要让生产者发送每条数据的时候，里面加一个全局唯一的id，类似订单id之类的东西，然后消费到了后，先根据这个id去比如redis里查一下，之前消费过吗？如果没有消费过，就处理，然后这个id写redis。如果消费过了，那就别处理了，保证别重复处理相同的消息即可。 还有比如基于数据库的唯一键来保证重复数据不会重复插入多条，重复数据拿到了以后我们插入的时候，因为有唯一键约束了，所以重复数据只会插入报错，不会导致数据库中出现脏数据 这里我推荐利用数据库中的唯一键约束 特性,天然的幂等 防止重复请求这个问题和MQ消费重复数据有点重复了 普通防止重复请求 当然这个requestId 会落地DB表并且requestId是唯一约束,面试的时候幂等问题 你能讲出具体类的设计 表的设计 就完美了</description>
    </item>
    
  </channel>
</rss>